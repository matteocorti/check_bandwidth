#!perl

use strict;
use warnings;

use 5.00800;

use Getopt::Long;
use Carp;
use English qw(-no_match_vars);

use Monitoring::Plugin;
use Monitoring::Plugin::Threshold;
use Net::DNS::Resolver;
use File::Slurp;

use version; our $VERSION = '0.9.7';

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $downstream
  $help
  $host
  $host_ip
  $host_port
  $iperf
  $local_ip
  $local_port
  $plugin
  $result
  $swap
  $threshold
  $upstream
  $verbosity
  %direction
);

##############################################################################
# subroutines

##############################################################################
# Usage     : usage( -message => 'some text', -exitval => 1 )
# Purpose   : prints a usage message
# Returns   : n/a
# Arguments : -message : an optional error message
#             -exitval : the exit code (defaults to 0)
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub usage {

    my %args = @_;

    my $exitval = 0;
    if ( $args{-exitval} ) {
        $exitval = $args{-exitval};
    }

    if ( $args{-message} ) {
        print $args{-message};
    }

    print <<'EOT';
        check_bandwidth --host hostname
                   [--iperf path]
                   [--localport port] [--hostport port]
                   [--verbose]
                   [--version|--help]

        Mandatory arguments:
         --host,-H       hostname   check the bandwidth from localhost to 'hostname'

        Options:
         --iperf         path       path of the iperf utility
         --localport,-l  port       local port
         --hostport,-p   port       remote port
         --swap,-s                  swap down- and upstream statistics
         --version,V                print version number
         --verbose,-v               be more verbose (can be repeated)
EOT

    exit $exitval;

}

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        print $message;
    }

    return;

}

##################################################
# gets the IP of a host
# param host
sub get_ip {

    my $host = shift;

    if ( $host =~
/((25[0-5]|2[0-4]\d|([01]?\d?\d))\.){3}(25[0-5]|2[0-4]\d|([01]?\d?\d))/mxs
      )
    {
        return $host;
    }

    my $dns_resolver = Net::DNS::Resolver->new();

    verbose "get IP address for $host: ", 1;

    my $query = $dns_resolver->search($host);

    if ($query) {
        foreach my $rr ( $query->answer() ) {
            if ( $rr->type() eq 'A' ) {
                verbose $rr->address() . "\n", 1;
                return $rr->address;
            }
        }
    }

    $plugin->nagios_exit( UNKNOWN,
            "cannot get the address of $host ("
          . $dns_resolver->errorstring
          . ')' );

    return;

}

##############################################################################
# Usage     : check_positive_integer($number)
# Purpose   : checks if the argument is a valid positive integer
# Returns   : true if the number is valid
# Arguments : number to test
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_positive_integer {
    my $number = shift;
    return $number =~ /^\d+$/mxs;
}

##############################################################################
# Usage     : get_path('program_name');
# Purpose   : retrieves the path of an executable file using the
#             'which' utility
# Returns   : the path of the program (if found)
# Arguments : the program name
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub get_path {

    my $prog = shift;
    my $path;

    my $which_command = "which $prog";
    my $which_output;

    open $which_output, q{-|},
      "$which_command 2>&1"
      or $plugin->nagios_exit( UNKNOWN,
        "Cannot execute $which_command: $OS_ERROR" );

    while (<$which_output>) {
        chomp;
        if ( !/^which:/mxs ) {
            $path = $_;
        }
    }

    if (  !( close $which_output )
        && ( $OS_ERROR != 0 ) )
    {

        # close to a piped open return false if the command with non-zero
        # status. In this case $! is set to 0
        $plugin->nagios_exit( UNKNOWN,
            "Error while closing pipe to $which_command: $OS_ERROR" );
    }

    return $path;

}

##############################################################################
# main

# initialization
$iperf     = q{};
$plugin    = Monitoring::Plugin->new( shortname => 'CHECK_BANDWIDTH' );
$verbosity = 0;

########################
# Command line arguments

Getopt::Long::Configure( 'bundling', 'no_ignore_case' );
$result = GetOptions(
    'iperf=s'       => \$iperf,
    'help|h|?'      => \$help,
    'host|H=s'      => \$host,
    'hostport|p=i'  => \$host_port,
    'localport|l=i' => \$local_port,
    'swap|s'        => \$swap,
    'verbose|v+'    => \$verbosity,
    'version|V' => sub { print "check_bandwidth version $VERSION\n"; exit 3; },
);

if ($help) {
    usage( -exitval => UNKNOWN, );
}

###############
# Sanity checks

# syntax
if ( !$result ) {
    usage( -exitval => UNKNOWN, );
}

# host
if ( !defined $host ) {
    usage(
        -message => 'No host specified',
        -exitval => UNKNOWN,
    );
}

##########################
# Sanity checks: utilities

if ( !$iperf ) {
    $iperf = get_path('iperf');
}

if ( !$iperf ) {
    $plugin->nagios_exit( UNKNOWN, 'Unable to find the "iperf" utility"' );
}

if ( !-x $iperf ) {
    $plugin->nagios_exit( UNKNOWN, "$iperf is not executable" );
}

verbose "using $iperf\n", 2;

##################################
# perform the test

my $host_ip = get_ip($host);

my $command = "$iperf --client $host_ip --tradeoff --format k";

if ( defined $local_port ) {
    $command = $command . " --listenport $local_port";
}
if ( defined $host_port ) {
    $command = $command . " --port $host_port";
}

my $output;

verbose "Executing \"$command\"\n";

my $pid = open $output, q{-|}, "$command 2>&1"
  or $plugin->nagios_exit( UNKNOWN, "Cannot execute $command: $OS_ERROR" );

# process command output
# expected format (example)
#
# ------------------------------------------------------------
# Server listening on TCP port 5001
# TCP window size: 85.3 KByte (default)
# ------------------------------------------------------------
# ------------------------------------------------------------
# Client connecting to example.com, TCP port 5001
# TCP window size: 16.0 KByte (default)
# ------------------------------------------------------------
# [  5] local 192.168.1.1 port 57003 connected with 192.168.1.2 port 5001
# [  4] local 192.168.1.1 port 5001 connected with 192.168.1.2 port 37068
# [  5]  0.0-10.0 sec  81.7 MBytes  68.5 Mbits/sec
# [  4]  0.0-10.0 sec  85.6 MBytes  71.8 Mbits/sec

# read the whole file
my @lines = read_file($output);

if ( $verbosity > 1 ) {
    for my $line (@lines) {
        verbose "$line", 1;
    }
}

# process output

for my $line (@lines) {

    if ( $line =~ /^\[\ *(\d+)\]\ local.*/mxs ) {
        carp "ID $1";
        next;
    }

    if ( $line =~ /^\[\ *\d+\]\ \ .*\ (\d+)\ Kbits\/sec/mxs ) {
        if ( !defined $upstream ) {
            $upstream = $1;
        }
        else {
            $downstream = $1;
        }
    }

}

if ( !defined $upstream || !defined $downstream ) {
    $plugin->nagios_exit( UNKNOWN,
        "Cannot parse up- and downstream speed: check $command output" );
}

if ( defined $swap ) {
    ( $upstream, $downstream ) = ( $downstream, $upstream );
}

$plugin->add_perfdata(
    label => 'up',
    value => $upstream,
    uom   => 'K',
);

$plugin->add_perfdata(
    label => 'down',
    value => $downstream,
    uom   => 'K',
);

if (  !( close $output )
    && ( $OS_ERROR != 0 ) )
{

    # close to a piped open return false if the command with non-zero
    # status. In this case $! is set to 0
    $plugin->nagios_exit( UNKNOWN,
        "Error while closing pipe to $command: $OS_ERROR" );
}

$plugin->nagios_exit( OK, "down/up $upstream/$downstream Kbits/s" );

1;
